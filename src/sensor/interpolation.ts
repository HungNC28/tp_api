const g = 0.981;
const m = 0.35;

const InterpolationSource = [
    // Sông Mây
    {
        group_id: "09398145",
        Z: [17, 17.5, 18, 18.5, 19, 19.5, 20, 20.5, 21, 21.5, 22, 22.5, 23, 23.5, 24, 24.5, 25, 25.5, 26, 26.5, 27], // mực nước hồ (m)
        a: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], // độ mở cửa cống cấp nước (cm)
        Q: [
            [0.38, 0.42, 0.46, 0.49, 0.52, 0.55, 0.58, 0.61, 0.64, 0.66, 0.69, 0.71, 0.73, 0.76, 0.78, 0.80, 0.82, 0.84, 0.86, 0.88, 0.90],
            [0.75, 0.83, 0.91, 0.98, 1.04, 1.10, 1.16, 1.22, 1.27, 1.32, 1.37, 1.42, 1.46, 1.51, 1.55, 1.59, 1.63, 1.67, 1.71, 1.75, 1.79],
            [1.11, 1.23, 1.35, 1.45, 1.55, 1.65, 1.73, 1.82, 1.90, 1.97, 2.05, 2.12, 2.19, 2.26, 2.32, 2.38, 2.45, 2.51, 2.56, 2.62, 2.68],
            [1.46, 1.63, 1.78, 1.93, 2.06, 2.18, 2.30, 2.41, 2.52, 2.62, 2.72, 2.82, 2.91, 3.00, 3.09, 3.17, 3.25, 3.33, 3.41, 3.49, 3.56],
            [1.80, 2.01, 2.21, 2.39, 2.56, 2.71, 2.86, 3.00, 3.14, 3.27, 3.39, 3.51, 3.63, 3.74, 3.85, 3.95, 4.06, 4.16, 4.26, 4.35, 4.45],
            [2.13, 2.39, 2.63, 2.85, 3.05, 3.24, 3.42, 3.59, 3.75, 3.90, 4.05, 4.20, 4.34, 4.47, 4.60, 4.73, 4.86, 4.98, 5.09, 5.21, 5.32],
            [2.45, 2.76, 3.04, 3.30, 3.54, 3.76, 3.97, 4.17, 4.36, 4.54, 4.71, 4.88, 5.04, 5.20, 5.36, 5.51, 5.65, 5.79, 5.93, 6.07, 6.20],
            [2.76, 3.12, 3.44, 3.74, 4.01, 4.27, 4.51, 4.74, 4.96, 5.17, 5.37, 5.56, 5.75, 5.93, 6.10, 6.28, 6.44, 6.60, 6.76, 6.92, 7.07],
            [3.05, 3.47, 3.84, 4.17, 4.48, 4.78, 5.05, 5.31, 5.56, 5.79, 6.02, 6.24, 6.45, 6.65, 6.85, 7.04, 7.23, 7.41, 7.59, 7.76, 7.94],
            [3.36, 3.81, 4.22, 4.60, 4.95, 5.27, 5.58, 5.87, 6.15, 6.41, 6.66, 6.91, 7.14, 7.37, 7.59, 7.80, 8.01, 8.21, 8.41, 8.61, 8.80],
            [3.64, 4.14, 4.60, 5.02, 5.40, 5.76, 6.10, 6.43, 6.73, 7.02, 7.31, 7.57, 7.83, 8.08, 8.33, 8.56, 8.79, 9.01, 9.23, 9.45, 9.66],
            [3.91, 4.48, 4.97, 5.43, 5.85, 6.25, 6.62, 6.97, 7.31, 7.63, 7.94, 8.23, 8.52, 8.79, 9.06, 9.32, 9.57, 9.81, 10.05, 10.28, 10.51]
        ],// lưu lượng xả
        V: [0, 33503, 67006, 228802.5, 390599, 737246.5, 1083894, 1624266, 2164638, 2875722.5, 3586807, 4461713, 5336619, 6380337.5, 7424056,
            8601052.5, 9778049, 11058164.5, 12338280, 13749616.5, 15160953, 16722037.5, 18283122, 19983829, 21684536, 23524866.5, 25365197], // thể tích hồ chứa (m3)
        ratio: 1, // tỉ lệ cho thể tích
        B: 39, // bề rộng tràn (m)
    },
    // Đa Tôn
    {
        group_id: "28087779",
        Z: [125.5, 126, 126.5, 127, 127.5, 128, 128.5, 129, 129.5, 130, 130.5, 131, 131.5, 132, 132.5, 133, 133.5, 134, 134.5, 135],
        a: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], // độ mở cửa cống cấp nước (cm) (DR)
        Q: [
            [0.39, 0.43, 0.47, 0.50, 0.53, 0.56, 0.59, 0.62, 0.65, 0.67, 0.70, 0.72, 0.74, 0.76, 0.78, 0.81, 0.83, 0.85, 0.86, 0.88],
            [0.77, 0.85, 0.93, 1.00, 1.06, 1.12, 1.18, 1.23, 1.29, 1.34, 1.39, 1.43, 1.48, 1.52, 1.57, 1.61, 1.65, 1.69, 1.73, 1.76],
            [1.15, 1.27, 1.38, 1.49, 1.58, 1.67, 1.76, 1.84, 1.92, 2.00, 2.07, 2.14, 2.21, 2.28, 2.34, 2.40, 2.47, 2.52, 2.58, 2.64],
            [1.51, 1.68, 1.83, 1.97, 2.10, 2.22, 2.34, 2.45, 2.55, 2.66, 2.75, 2.85, 2.94, 3.03, 3.11, 3.20, 3.28, 3.36, 3.44, 3.51],
            [1.87, 2.08, 2.27, 2.45, 2.61, 2.76, 2.91, 3.05, 3.18, 3.31, 3.43, 3.55, 3.66, 3.77, 3.88, 3.99, 4.09, 4.19, 4.29, 4.38],
            [2.21, 2.47, 2.70, 2.92, 3.11, 3.30, 3.47, 3.64, 3.80, 3.95, 4.10, 4.24, 4.38, 4.52, 4.65, 4.77, 4.89, 5.01, 5.13, 5.25],
            [2.55, 2.85, 3.13, 3.38, 3.61, 3.83, 4.03, 4.23, 4.42, 4.59, 4.77, 4.93, 5.10, 5.25, 5.40, 5.55, 5.70, 5.84, 5.97, 6.11],
            [2.88, 3.23, 3.54, 3.83, 4.10, 4.35, 4.59, 4.81, 5.03, 5.23, 5.43, 5.62, 5.81, 5.99, 6.16, 6.33, 6.49, 6.66, 6.81, 6.97],
            [3.19, 3.59, 3.95, 4.28, 4.58, 4.87, 5.14, 5.39, 5.63, 5.87, 6.09, 6.30, 6.51, 6.71, 6.91, 7.10, 7.29, 7.47, 7.65, 7.82],
            [3.50, 3.95, 4.35, 4.71, 5.05, 5.37, 5.68, 5.96, 6.23, 6.49, 6.74, 6.98, 7.22, 7.44, 7.66, 7.87, 8.08, 8.28, 8.48, 8.67],
            [3.81, 4.29, 4.74, 5.15, 5.52, 5.88, 6.21, 6.53, 6.83, 7.12, 7.39, 7.66, 7.91, 8.16, 8.40, 8.64, 8.86, 9.09, 9.30, 9.52],
            [4.11, 4.63, 5.12, 5.57, 5.98, 6.37, 6.74, 7.08, 7.41, 7.73, 8.03, 8.33, 8.61, 8.88, 9.14, 9.40, 9.65, 9.89, 10.13, 10.36]
        ],// lưu lượng xả
        V: [0, 0, 0.002, 0.068, 0.34, 0.918, 1.383, 1.848, 2.498, 3.148, 3.985, 4.822, 5.861, 6.899, 8.11, 9.32, 10.69, 12.06, 13.557, 15.054, 16.658, 18.261, 20.025, 21.789, 23.747, 25.704, 30.056],
        ratio: 10e6, // V : 10e6
        B: 22, // bề rộng tràn (m)
    }
]

export class Compute {
    constructor(private group_id) { }

    private readonly source = InterpolationSource.find(s => s.group_id == this.group_id);

    private OneWay_Interpolation(n: number, xmin: number, xmax: number, ymin: number, ymax: number, round?: number): number {
        const r = (n - xmin) / (xmax - n);
        const f = (r * ymax + ymin) / (r + 1);
        const result = Math.round(f * round) / round;
        return round ? result : f;
    }

    CalculateWaterIndex(WAU: number) {
        const source = this.source;
        if (!source) {
            return +0;
        }
        const Z_Min = Math.floor(WAU);
        const Z_Max = Z_Min + 1;
        if (source.Z.indexOf(Z_Min) !== -1) {
            if (source.Z.indexOf(Z_Min) === source.Z.length - 1) {
                return [...source.V].pop();
            }
            const V_Min = source.V[source.Z.indexOf(Z_Min)];
            const V_Max = source.V[source.Z.indexOf(Z_Max)];
            const f = this.OneWay_Interpolation(WAU, Z_Min, Z_Max, V_Min, V_Max, 1000);
            return (f * source.ratio) / 10e6;
        }
        return +0;
    }

    // lưu lượng qua cống ( lưu lượng xả )
    CalculateWaterFlow(WAU: number, DR: number) {
        const source = this.source;
        if (!source) {
            return +0;
        }
        const Z_Min = Math.floor(WAU);
        const Z_Max = Z_Min + 1;
        const a_min = Math.floor(DR);
        const a_max = a_min + 10;
        const arrayDR = source.a.map(el => el / 100); // DR data unit m 
        if (arrayDR.indexOf(a_min) !== -1) {
            if (arrayDR.indexOf(a_min * 0.01) === arrayDR.length - 1) {
                return [...arrayDR].pop();
            }
            const arrQ1 = source.Q[arrayDR.indexOf(a_min)];
            const arrQ2 = source.Q[arrayDR.indexOf(a_max)];
            if(arrQ1 && arrQ2) {
                const Q_min = [
                    arrQ1.find((_, i) => i === source.Z.indexOf(Z_Min) - 4),
                    arrQ2.find((_, i) => i === source.Z.indexOf(Z_Min) - 4)
                ];
                const Q_max = [
                    arrQ1.find((_, i) => i === source.Z.indexOf(Z_Max) - 4),
                    arrQ2.find((_, i) => i === source.Z.indexOf(Z_Max) - 4)
                ];
                const Q_avg = [
                    this.OneWay_Interpolation(DR, a_min, a_max, Q_min[0], Q_min[1], 100),
                    this.OneWay_Interpolation(DR, a_min, a_max, Q_max[0], Q_max[1], 100)
                ]
                const result = this.OneWay_Interpolation(WAU, Z_Min, Z_Max, Q_avg[0], Q_avg[1], 100);
                return result;
            }
            return +0;
        }
        return +0;
    }

    // lưu lượng qua tràn
    CalculateWaterOverFlow(WAU: number) {
        const source = this.source;
        if (source) {
            return m * this.source.B * Math.sqrt(2 * g) * (WAU ** 1.5);
        }
        return +0;
    }
}


